// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Associate a link with a category
	//
	//  INSERT INTO link_category_map (link_id, category_id) VALUES ($1, $2)
	AddLinkToCategory(ctx context.Context, arg []AddLinkToCategoryParams) (int64, error)
	// Check if link exists by URL
	//
	//  SELECT id, true AS exists FROM links l WHERE l.url = $1
	//  UNION ALL
	//  SELECT NULL, false AS exists WHERE NOT EXISTS (SELECT 1 FROM links WHERE links.url = $1)
	//  LIMIT 1
	CheckIfLinkExistsByURL(ctx context.Context, url string) (CheckIfLinkExistsByURLRow, error)
	// Create a new category
	//
	//  INSERT INTO category (name, parent_id, description)
	//  VALUES ($1, $2, $3) RETURNING id
	CreateCategory(ctx context.Context, arg CreateCategoryParams) (pgtype.UUID, error)
	// Create a new link
	//
	//  INSERT INTO links (url, title, description, short_url)
	//  VALUES ($1, $2, $3, $4) RETURNING id
	CreateLink(ctx context.Context, arg CreateLinkParams) (pgtype.UUID, error)
	// Delete category
	//
	//  DELETE FROM category WHERE id = $1
	DeleteCategory(ctx context.Context, id pgtype.UUID) (int64, error)
	// Delete link
	//
	//  DELETE FROM links WHERE id = $1
	DeleteLink(ctx context.Context, id pgtype.UUID) (int64, error)
	// Get all categories
	//
	//  SELECT id, name, parent_id, description, created_at, updated_at FROM category
	GetAllCategories(ctx context.Context) ([]Category, error)
	// Get all public links
	//
	//  SELECT id, url, title, description, short_url, created_at, updated_at FROM links
	GetAllLinks(ctx context.Context) ([]Link, error)
	// Get all categories linked to a specific link
	//
	//  SELECT c.id, c.name, c.description
	//  FROM category c
	//  JOIN link_category_map lcm ON c.id = lcm.category_id
	//  WHERE lcm.link_id = $1
	GetCategoriesForLink(ctx context.Context, linkID pgtype.UUID) ([]GetCategoriesForLinkRow, error)
	// Get category by ID
	//
	//  SELECT id, name, parent_id, description FROM category
	//  WHERE id = $1
	GetCategoryByID(ctx context.Context, id pgtype.UUID) (GetCategoryByIDRow, error)
	// Get category by name
	//
	//  SELECT id, name, parent_id, description FROM category
	//  WHERE name = $1
	GetCategoryByName(ctx context.Context, name string) (GetCategoryByNameRow, error)
	// Get link by ID
	//
	//  SELECT id, url, title, description, short_url, created_at, updated_at
	//  FROM links
	//  WHERE id = $1
	GetLinkByID(ctx context.Context, id pgtype.UUID) (Link, error)
	// Get link by short URL
	//
	//  SELECT id, url, title, description, short_url FROM links
	//  WHERE short_url = $1
	GetLinkByShortURL(ctx context.Context, shortUrl string) (GetLinkByShortURLRow, error)
	// Get link by URL
	//
	//  SELECT id, url, title, description, short_url FROM links WHERE url = $1
	GetLinkByURL(ctx context.Context, url string) (GetLinkByURLRow, error)
	// Get all links in a category
	//
	//  SELECT l.id, l.url, l.title, l.description, l.short_url, l.created_at, l.updated_at
	//  FROM links l
	//  JOIN link_category_map lcm ON l.id = lcm.link_id
	//  WHERE lcm.category_id = $1
	GetLinksForCategory(ctx context.Context, categoryID pgtype.UUID) ([]Link, error)
	// Get paginated links
	//
	//  SELECT id, url, title, description, short_url, created_at, updated_at
	//  FROM links
	//  ORDER BY created_at DESC
	//  LIMIT $1 OFFSET $2
	GetLinksPaginated(ctx context.Context, arg GetLinksPaginatedParams) ([]Link, error)
	// Get subcategories of a category
	//
	//  SELECT id, name, description, created_at, updated_at
	//  FROM category
	//  WHERE parent_id = $1
	GetSubcategories(ctx context.Context, parentID pgtype.UUID) ([]GetSubcategoriesRow, error)
	// Remove a link from a category
	//
	//  DELETE FROM link_category_map
	//  WHERE link_id = $1 AND category_id = $2
	RemoveLinkFromCategory(ctx context.Context, arg RemoveLinkFromCategoryParams) (int64, error)
	// Update category details
	//
	//  UPDATE category
	//  SET name = $1, parent_id = $2, description = $3, updated_at = now()
	//  WHERE id = $4
	UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (int64, error)
	// Update link details
	//
	//  UPDATE links
	//  SET title = $1, description = $2, updated_at = now()
	//  WHERE id = $3
	UpdateLink(ctx context.Context, arg UpdateLinkParams) (int64, error)
}

var _ Querier = (*Queries)(nil)
