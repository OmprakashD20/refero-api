// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: batch.go

package repository

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const removeLinkFromCategory = `-- name: RemoveLinkFromCategory :batchexec
DELETE FROM link_category_map 
WHERE link_id = $1 AND category_id = $2
`

type RemoveLinkFromCategoryBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type RemoveLinkFromCategoryParams struct {
	LinkID     pgtype.UUID `db:"link_id" json:"linkId"`
	CategoryID pgtype.UUID `db:"category_id" json:"categoryId"`
}

// Remove a link from a category
//
//  DELETE FROM link_category_map
//  WHERE link_id = $1 AND category_id = $2
func (q *Queries) RemoveLinkFromCategory(ctx context.Context, arg []RemoveLinkFromCategoryParams) *RemoveLinkFromCategoryBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.LinkID,
			a.CategoryID,
		}
		batch.Queue(removeLinkFromCategory, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &RemoveLinkFromCategoryBatchResults{br, len(arg), false}
}

func (b *RemoveLinkFromCategoryBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *RemoveLinkFromCategoryBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
